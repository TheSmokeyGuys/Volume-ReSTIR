#version 460 core
#extension GL_GOOGLE_include_directive : enable
#extension GL_ARB_shader_clock : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#define SPATIAL_REUSE_GROUP_SIZE_X 64
#define SPATIAL_REUSE_GROUP_SIZE_Y 1

#include "host_device.h"

layout(local_size_x = SPATIAL_REUSE_GROUP_SIZE_X,
       local_size_y = SPATIAL_REUSE_GROUP_SIZE_Y, local_size_z = 1) in;

layout(set = 2, binding = eUniform) uniform _RestirUniforms {
  RestirUniforms uniforms;
};

layout(set = 3, binding = ePointLights, scalar) buffer PointLights {
  PointLight lights[];
}
pointLights;

layout(set = 3, binding = eTriangleLights, scalar) buffer TriangleLights {
  TriangleLight lights[];
}
triangleLights;

// layout(set     = 1,
//       binding = B_ENVIRONMENTAL_MAP) uniform sampler2D environmentalTexture;

layout(set = 4, binding = eFrameWorldPosition,
       rgba32f) uniform image2D frameWorldPosition;
layout(set = 4, binding = eFrameAlbedo, rgba32f) uniform image2D frameAlbedo;
layout(set = 4, binding = eFrameNormal, rgba32f) uniform image2D frameNormal;
layout(set = 4, binding = eFrameMaterialProps,
       rgba32f) uniform image2D frameRoughnessMetallic;

layout(set = 4, binding = eTmpReservoirInfo,
       rgba32f) uniform image2D reservoirInfoBuf;
layout(set = 4, binding = eTmpReservoirWeight,
       rgba32f) uniform image2D reservoirWeightBuf;

layout(set = 4, binding = eReservoirsInfo,
       rgba32f) uniform image2D resultReservoirInfoBuf;
layout(set = 4, binding = eReservoirWeights,
       rgba32f) uniform image2D resultReservoirWeightBuf;

#define NUM_NEIGHBORS 3

#include "headers/random.glsl"
#include "headers/reservoir.glsl"

void main() {
  uvec2 pixelCoord = gl_GlobalInvocationID.xy;
  ivec2 coordImage = ivec2(gl_GlobalInvocationID.xy);

  uvec2 s   = pcg2d(pixelCoord * int(clockARB()));
  uint seed = s.x + s.y;

  if (any(greaterThanEqual(pixelCoord, uniforms.screenSize))) {
    return;
  }

  GeometryInfo gInfo;

  gInfo.albedo           = imageLoad(frameAlbedo, coordImage);
  gInfo.normal           = imageLoad(frameNormal, coordImage).xyz;
  gInfo.worldPos         = imageLoad(frameWorldPosition, coordImage).xyz;
  vec2 roughnessMetallic = imageLoad(frameRoughnessMetallic, coordImage).xy;
  gInfo.roughness        = roughnessMetallic.x;
  gInfo.metallic         = roughnessMetallic.y;
  gInfo.albedoLum = luminance(gInfo.albedo.r, gInfo.albedo.g, gInfo.albedo.b);
  gInfo.camPos    = uniforms.currCamPos.xyz;

  float exist = imageLoad(frameWorldPosition, coordImage).w;
  if (exist < 0.5) {
    return;
  }

  uint reservoirIndex  = pixelCoord.y * uniforms.screenSize.x + pixelCoord.x;
  vec4 reservoirInfo   = imageLoad(reservoirInfoBuf, coordImage);
  vec4 reservoirWeight = imageLoad(reservoirWeightBuf, coordImage);
  Reservoir res        = unpackReservoirStruct(reservoirInfo, reservoirWeight);

  packReservoirStruct(res, reservoirInfo, reservoirWeight);
  imageStore(resultReservoirInfoBuf, coordImage, reservoirInfo);
  imageStore(resultReservoirWeightBuf, coordImage, reservoirWeight);
}
